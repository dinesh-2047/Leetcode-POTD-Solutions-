2127. Maximum Employees to Be Invited to a Meeting

class Solution {
public:

int BFS(int start, unordered_map<int , list<int>>&adj , vector<bool>&visited){
    queue<pair<int, int>>q; //(node, path length)
    q.push({start, 0});

    int maxDistance = 0 ;

    while(!q.empty()){
        
        auto[currNode, distance ] = q.front();
        q.pop();

        for(auto &nbr : adj[currNode]){
            if(!visited[nbr]){
                visited[nbr] = true; 
                q.push({nbr, distance+1});
                maxDistance = max(maxDistance , distance+1);
            }
        }
    }
    return maxDistance ; 
}
    int maximumInvitations(vector<int>& favorite) {
        int n = favorite.size();
        
        unordered_map<int , list<int>>adj;
        for(int i = 0 ; i<n; i++){
            int u = i ; 
            int v = favorite[i];
            //u->v
            //but we reverse the graph for easy traversal 
            adj[v].push_back(u); //refversed graph -> so that we can find the path length after traversal
        }

        int longestCycleEmplCount = 0;
        int happyCoupleEmplCount = 0; // cycle length = 2 waalo se ktna mil payega total 

       vector<bool>visited(n,0);
        for(int i = 0 ; i<n; i++){
         
          if(!visited[i]){

            //(node, abtak ka node count)
            unordered_map<int , int >mp;
             
             int currNode = i;
             int currNodeCount = 0;

             while(!visited[currNode]){//until cycle is not detected
                 visited[currNode] = true; 
                 mp[currNode] = currNodeCount;

                 int nextNode = favorite[currNode];
                 currNodeCount++;


                 if(mp.count(nextNode)){ //already visited h ye, mtlab cycle detect ho gya h 
                  int cycleLength = currNodeCount - mp[nextNode];
                  longestCycleEmplCount = max(longestCycleEmplCount, cycleLength);

                  if(cycleLength==2){//happy couple case 

                    // currentNode <-> nextNode = 2 nodes
                    vector<bool>visitedNodes(n, false);
                    visitedNodes[currNode] = true;
                    visitedNodes[nextNode] = true;
                    happyCoupleEmplCount += 2 + BFS(currNode ,adj, visitedNodes) + BFS(nextNode, adj, visitedNodes);

                  }
                  break;
                      
                 }
                 currNode = nextNode;


             }
          }


        }
        return max(happyCoupleEmplCount , longestCycleEmplCount);
    }
};

// Time Complexity ->O(n)