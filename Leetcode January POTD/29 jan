684. Redundant Connection

Code using dsu apporach 


class DSU {
    vector<int>parent;
    vector<int>rank;
 
 public:
    DSU(int n ){
        parent.resize(n+1);
        rank.resize(n+1);

        for(int i = 0 ; i<=n ; i++){
            parent[i] = i;
            rank[i] = 0 ;
        }
    }
    
    int find(int x){
        if(parent[x] == x) return x;
        return parent[x] = find(parent[x]);
    }

    void Union(int x , int y ){
        int x_parent = find(x);
        int y_parent = find(y);

        if(x_parent == y_parent){
            return ;
        }

        if(rank[x_parent] > rank[y_parent]){
            parent[x_parent] = y_parent;
            rank[y_parent] += x_parent;
        }
        else{
            parent[y_parent] = x_parent;
            rank[x_parent] += y_parent;
        }
    }
};

class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();

        DSU dsu(n);

        for(int i = 0 ; i<n; i++){
            int u = edges[i][0];
            int v = edges[i][1];

            if(dsu.find(u) == dsu.find(v)) return edges[i];

            dsu.Union(u,v);
        }
        return {};
    }
};