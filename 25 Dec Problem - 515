/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        if(root==nullptr) return {};
        vector<int>ans;
        queue<TreeNode*>q;
        q.push(root);


//using bfs 
        while(!q.empty()){
            int n = q.size();
            vector<int>v;
            //process each nodes of every level 
            while(n--){
                TreeNode* temp = q.front();
                q.pop();
                //store evey level node in vector
               v.push_back(temp->val);

               if(temp->left){
                q.push(temp->left);
               }

               if(temp->right){
                q.push(temp->right);
               }

            }
            //find max element at evey level ans push to ans vector 
            int max = *max_element(begin(v), end(v));
            ans.push_back(max);
        }
        return ans; 
    }
};// Time and Space complexity of this code is O(n);
